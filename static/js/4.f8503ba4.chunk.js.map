{"version":3,"sources":["components/table/Table.tsx","components/list/List.tsx"],"names":["TableComp","data","React","useContext","SearchContext","useState","devList","setDevList","colNames","setColNames","useEffect","tmpListdata","forEach","itemO","tmpObj","no","FL","itemI","val","content","push","max","maxKeysIndex","item","index","len","Object","keys","length","setColumns","processData","Provider","value","searchString","className","rowData","map","field","sortable","filter","checkboxSelection","ListComp","list","setList","url","a","fetch","json","res","fetchData","process","Table"],"mappings":"2MA+EeA,EA9DG,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,KAEnB,GADiBC,IAAMC,WAAWC,KACJC,sBAA9B,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,mBAAc,IAA9C,mBAAOG,EAAP,KAAiBC,EAAjB,KAmCA,OApBAC,qBAAU,YACY,WAClB,IAAIC,EAAmB,GAEvBV,EAAKW,SAAQ,SAACC,GACZ,IAAIC,EAAc,GAClBA,EAAM,GAASD,EAAME,GAErBF,EAAMG,GAAGJ,SAAQ,SAACK,GAChBH,EAAOG,EAAMC,KAAOD,EAAME,WAE5BR,EAAYS,KAAKN,MAEnBP,EAAWI,GA1BI,SAACA,GAClB,IAAIU,EAAM,EACNC,EAAe,EACnBX,EAAYC,SAAQ,SAACW,EAAWC,GAC9B,IAAIC,EAAMC,OAAOC,KAAKJ,GAAMK,OACxBH,EAAMJ,IACRA,EAAMI,EACNH,EAAeE,MAGnBf,EAAYiB,OAAOC,KAAKhB,EAAYW,KAiBlCO,CAAWlB,GAGbmB,KACC,IAGD,mCACE,cAAC,IAAcC,SAAf,CAAwBC,MAAO,CAAEC,aAAc,aAA/C,SACE,8BACE,qBAAKC,UAAU,yBAAf,SACE,cAAC,cAAD,CAAaC,QAAS7B,EAAtB,SACGE,EAASoB,QACRpB,EAAS4B,KAAI,SAACb,EAAWC,GAAZ,OACX,cAAC,eAAD,CAEEa,MAAOd,EACPe,UAAU,EACVC,QAAQ,EACRC,mBAAmB,GAJdhB,iBCvCViB,UArBE,WACf,MAAwBpC,qBAAxB,mBAAOqC,EAAP,KAAaC,EAAb,KAaA,OAXAjC,qBAAU,WAAM,4CAGd,WAAyBkC,GAAzB,iBAAAC,EAAA,sEACqBC,MAAMF,GAD3B,cACQ3C,EADR,gBAEoBA,EAAK8C,OAFzB,OAEQC,EAFR,OAGEL,EAAQK,GAHV,2CAHc,6DAQdC,CAPS,UAAMC,qFAQd,IAGD,mCACE,kCAAUR,GAAQ,cAACS,EAAD,CAAWlD,KAAMyC","file":"static/js/4.f8503ba4.chunk.js","sourcesContent":["import React from \"react\";\nimport { AgGridColumn, AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport { useEffect, useState } from \"react\";\nimport { SearchContext } from \"../../contexts/searchContext\";\n\n// interface fieldListModel {\n//   val: string;\n//   content: string;\n// }\n\n// interface responseModel {\n//   no: string;\n//   FL: [fieldListModel];\n// }\n\nconst TableComp = ({ data }: any) => {\n  const sContext = React.useContext(SearchContext);\n  const [devList, setDevList] = useState<any>();\n  const [colNames, setColNames] = useState<any>([]);\n\n  const setColumns = (tmpListdata: any) => {\n    let max = 0;\n    let maxKeysIndex = 0;\n    tmpListdata.forEach((item: any, index: number) => {\n      let len = Object.keys(item).length;\n      if (len > max) {\n        max = len;\n        maxKeysIndex = index;\n      }\n    });\n    setColNames(Object.keys(tmpListdata[maxKeysIndex]));\n  };\n\n  useEffect(() => {\n    const processData = () => {\n      let tmpListdata: any = [];\n\n      data.forEach((itemO: any) => {\n        let tmpObj: any = {};\n        tmpObj[\"no\"] = itemO.no;\n\n        itemO.FL.forEach((itemI: any) => {\n          tmpObj[itemI.val] = itemI.content;\n        });\n        tmpListdata.push(tmpObj);\n      });\n      setDevList(tmpListdata);\n      setColumns(tmpListdata);\n    };\n\n    processData();\n  }, []);\n\n  return (\n    <>\n      <SearchContext.Provider value={{ searchString: \"divyanshu\" }}>\n        <div>\n          <div className=\"ag-theme-alpine h-90vh\">\n            <AgGridReact rowData={devList}>\n              {colNames.length &&\n                colNames.map((item: any, index: number) => (\n                  <AgGridColumn\n                    key={index}\n                    field={item}\n                    sortable={true}\n                    filter={true}\n                    checkboxSelection={false}\n                  ></AgGridColumn>\n                ))}\n            </AgGridReact>\n          </div>\n        </div>\n      </SearchContext.Provider>\n    </>\n  );\n};\n\nexport default TableComp;\n","import { useEffect, useState } from \"react\";\nimport Stub from \"../../stub.json\";\nimport TableComp from \"../table/Table\";\n\nconst ListComp = () => {\n  const [list, setList] = useState();\n\n  useEffect(() => {\n    const url = `${process.env.REACT_APP_ALL_DEV_URI}`;\n\n    async function fetchData(url: string) {\n      const data = await fetch(url);\n      const res = await data.json();\n      setList(res);\n    }\n    fetchData(url);\n  }, []);\n\n  return (\n    <>\n      <section>{list && <TableComp data={list} />}</section>\n    </>\n  );\n};\n\nexport default ListComp;\n"],"sourceRoot":""}